---
import type {Image} from "../types"
import "../assets/prev.svg"
import "../assets/next.svg"
import {ASSETS_URL} from "../constants.ts";

interface Props extends Image {
	loading: HTMLImageElement["loading"]
	fetchPriority: HTMLImageElement["fetchPriority"]
}

const {
	background = "transparent",
	caption,
	color,
	fetchPriority,
	height,
	key,
	loading,
	width,
} = Astro.props
const assetId = key.replace(/\.[^/.]+$/, "")
const id = caption ? `${[caption.toLowerCase().replace(/, | /g, "-"), assetId].join("-")}` : `p-${assetId}`;
const textColor = color === "black" ? "var(--black)" : "var(--white)"
const scaledHeight = Math.floor(height * 0.52)
const scaledWidth = Math.floor(width * 0.52)
---

<section
	id={id}
	style={`--bg-color: ${background}; --text-color: ${textColor};`}
>
	<figure>
		<a href={`#${id}`} aria-label={caption ? `Anchor for ${caption}` : 'Picture anchor'}>
			<picture>
				<source srcset={`${ASSETS_URL}/${assetId}?s=s`} media="(width <= 25rem)"/>
				<source srcset={`${ASSETS_URL}/${assetId}?s=m`} media="(25rem < width < 744px)"/>
				<source srcset={`${ASSETS_URL}/${assetId}?s=l`} media="(width >= 744px)"/>
				<img
					alt=""
					fetchpriority={fetchPriority}
					height={scaledHeight}
					loading={loading}
					src={`${ASSETS_URL}/${assetId}?s=s`}
					width={scaledWidth}
				/>
			</picture>
		</a>
		{caption ?
			<figcaption>{caption}</figcaption> : null}
	</figure>
</section>

<style>
	@property --scrollbar {
		syntax: "<length>";
		inherits: true;
		initial-value: 0px;
	}

	html {
		container-type: inline-size;
	}

	body {
		--scrollbar: calc(100vw - 100cqw);

		--size: min(
			calc(50vw - var(--gap) * 2 - var(--scrollbar) / 2),
			calc(100vh - var(--gap) * 4 - var(--scrollbar) / 2),
			calc(var(--max-size) - var(--gap) * 2 - var(--scrollbar) / 2)
		);
		--reduced-size: min(
			calc(100vh - var(--gap) - var(--scrollbar)),
			calc(100vw - var(--gap) - var(--scrollbar))
		)
	}

	@keyframes target {
		0%, 80% {
			background-color: var(--slime);
			color: var(--black);
		}

		100% {
			background-color: var(--bg-color);
		}
	}

	section {
		align-items: center;
		background-color: var(--bg-color);
		color: var(--text-color);
		display: flex;
		flex: 1;
		min-height: min(70vw, 100vh);
		padding: var(--gap);
		place-content: center;
		scroll-snap-align: start;

		a {
			display: block;
		}


		&:target {
			animation: target 3s ease;
		}

		&:nth-child(odd) a {
			cursor: url("../assets/prev.svg"), auto;
		}

		&:nth-child(even) a {
			cursor: url("../assets/next.svg"), auto;
		}

		&:last-child a {
			cursor: default;
		}
	}

	figure {
		display: flex;
		flex-direction: column;
		gap: calc(var(--md) * 0.4);
		margin: 0 0 calc(-1 * (var(--gap) * 0.25 + var(--md))) 0;
	}

	picture {
		display: block;
		margin: 0;
	}

	img {
		display: block;
		height: auto;
		max-height: var(--size);
		max-width: var(--size);
		width: auto;
	}

	figcaption {
		font-size: var(--md);
		line-height: 1;
		margin: 0;
		padding-inline: calc(var(--md) * 0.25);
		text-align: end;
		user-select: text;
	}

	@media (width <= 744px) {
		section {
			height: auto;
			min-height: 100vh;
			padding-block-end: calc(var(--gap) * 4);
			padding: calc(var(--gap) * 0.5);
		}

		section a:link {
			cursor: pointer;
		}
	}

	@media (width <= 744px) {
		img {
			max-height: var(--reduced-size);
			max-width: var(--reduced-size);
		}
	}
</style>
