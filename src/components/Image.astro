---
import type { Image } from "../types";

interface Props extends Image {
	loading: HTMLImageElement["loading"];
}

const {
	backgroundColor,
	caption,
	color,
	height,
	id,
	largeUrl,
	loading,
	mobileUrl,
	url,
	width,
} = Astro.props;
---

<section
  data-background={backgroundColor ?? "transparent"}
  id={id}
  style={`background-color: ${backgroundColor ?? "transparent"}`}
>
  <figure>
      <a href={`#${id}`}>
        <picture>
          <source srcset={mobileUrl} media="(max-width: 50rem)" />
          <source srcset={largeUrl} media="(min-width: 105rem)" />
          <img
            alt=""
            height={~~(height * 0.52)}
            loading={loading}
            src={url}
            width={~~(width * 0.52)}
          />
        </picture>
      </a>
      {caption ? <figcaption class={color === "black" ? 'black' : null}>{caption}</figcaption> : null}
    </figure>
</section>

 <style>
  :root {
    --size: min(
      calc(50vw - var(--gap) * 2),
      calc(100vh - var(--gap) * 4),
      calc(var(--max-size) - var(--gap) * 2)
    );
  }

  @keyframes target {
    0% {
      background-color: var(--slime);
      color: var(--black);
    }
    80% {
      background-color: var(--slime);
      color: var(--black);
    }
    100% {
      background-color: attr(data-background);
    }
  }

  section {
    align-items: start;
    background-color: attr(data-background color);
    display: grid;
    justify-content: start;
    min-height: min(70vw, 100vh);
    padding: var(--gap);
    scroll-snap-align: start;
    text-transform: uppercase;

    &:target {
	    animation-duration: 5s;
	    animation-name: target;
      animation-timing-function: ease;
    }
  }

  @media (width <= 40rem) {
    section {
      display: grid;
      height: auto;
      min-height: 100vh;
      padding-block-end: calc(var(--gap) * 4);
      padding: calc(var(--gap) * 0.5);
      place-content: center;
    }
  }

  section a {
    display: inline-block;
    text-decoration: none;
  }

  picture {
    width: fit-content;
  }

  figure {
    display: grid;
    gap: min(0.5cqh, calc(var(--gap) * 0.5));
    margin: 0;
  }

  img {
    display: block;
    height: auto;
    max-height: var(--size);
    max-width: var(--size);
    width: auto;
  }

  @media (width <= 40rem) {
    img {
      max-width: calc(100vw - var(--gap));
      max-height: calc(100vw - var(--gap));
    }
  }

  figcaption {
    font-size: clamp(0.65rem, 0.65vw, 0.8rem);
    margin: 0;
    opacity: 0.75;
    padding-inline: calc(var(--gap) * 0.125);
    text-align: end;
    user-select: text;
    -webkit-user-select: text;
    &.black {
      color: var(--black);
    }
  }
</style>
