---
import Layout from "../layouts/Layout.astro";
import ImagesList from "../components/ImagesList.astro";
import { INITIAL_IMAGES_COUNT, PROFILE } from "../constants";

const images = Astro.locals.images.slice(0, INITIAL_IMAGES_COUNT);
---

<script>
const slot = document.getElementById("slot");
const mq = window.matchMedia("(width <= 40rem)");
const { hash } = window.location;

const setupNav = () => {
  const links = document.querySelectorAll<HTMLAnchorElement>("section a");

  links?.forEach((link, i) => {
    if (!link) return;

    const prev = !!(i % 2);
    const onClick = (e: Event) => {
      if (mq.matches) return;

      e.preventDefault();
      link.closest('section')?.[
        prev ? "previousElementSibling" : "nextElementSibling"
      ]?.scrollIntoView();
    };

    link.addEventListener("click", onClick);
  });
};

const res = await fetch('/extra/');

if (res.ok && slot) {
  try {
    const html = await res.text();

    if (html) {
      slot.outerHTML = html;
    }
  } catch (err) {
    console.error(err);
  }
  slot.remove();

  setupNav();
  mq.addEventListener("change", setupNav);

  if (hash) {
    requestAnimationFrame(() => {
      const target = document.querySelector(`${hash} a`);

      if (target instanceof HTMLElement) {
        target.click();
      }
    });
  }

  if (mq.matches) {
    const sections = document.querySelectorAll('section');
    const meta = document.querySelector('meta[name="theme-color"]');

    const updateColor = (entries: IntersectionObserverEntry[]) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const bgColor = (entry.target as HTMLElement).style.getPropertyValue('--bg-color');
          meta?.setAttribute('content', bgColor);
        }
      });
    };

    const observer = new IntersectionObserver(updateColor, { threshold: 0.5 });
    sections.forEach(section => observer.observe(section));
  }
}
</script>

<Layout title={PROFILE.title}>
  <ImagesList images={images}/>
  <div id="slot" />
</Layout>

<style>
  body {
    display: grid;
    grid-template-columns: 1fr 1fr;

    > *:nth-child(odd) {
      max-width: var(--max-size);
    }
  }

  @media (width <= 40rem) {
    body {
      grid-template-columns: 1fr;
    }
  }
</style>
