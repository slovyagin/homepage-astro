---
import ImagesList from "../components/ImagesList.astro"
import {INITIAL_IMAGES_COUNT, profile} from "../constants"
import Layout from "../layouts/Layout.astro"

const initialImages = Astro.locals.images.slice(0, INITIAL_IMAGES_COUNT)
---

<Layout title={profile.title}>
	<Fragment slot="head">
		{initialImages.map(({mobileUrl, url, largeUrl}) => (
			<>
				<link
					rel="preload"
					as="image"
					href={mobileUrl}
					media="(max-width: 25rem)"
				/>
				<link
					rel="preload"
					as="image"
					href={url}
					media="(min-width: 25rem) and (max-width: 745px)"
				/>
				<link
					rel="preload"
					as="image"
					href={largeUrl}
					media="(min-width: 745px)"
				/>
			</>
		))}
	</Fragment>
	<ImagesList images={initialImages}/>
	<div id="slot"/>
</Layout>

<style>
	body {
		display: grid;
		grid-template-columns: 1fr 1fr;
	}

	body > section:nth-child(odd) {
		max-width: var(--max-size);
	}

	@media (width <= 744px)  {
		body {
			grid-template-columns: 1fr;
		}
	}
</style>

<script>
	const slot = document.getElementById("slot")
	const mq = window.matchMedia("(width <= 744px)")
	const {hash} = window.location

	const setupNav = () => {
		document.addEventListener('click', (e) => {
			const target = e.target as HTMLElement
			const link = target.closest('a')

			if (!link?.closest('section') || mq.matches) {
				return
			}

			const links = Array.from(document.querySelectorAll<HTMLAnchorElement>('section a'))

			const index = links.indexOf(link)
			const prev = !!(index % 2)

			e.preventDefault()
			link.closest('section')?.[
				prev ? 'previousElementSibling' : 'nextElementSibling'
				]?.scrollIntoView()
		})
	}

	const res = await fetch('/extra/')

	if (res.ok && slot) {
		try {
			const html = await res.text()

			if (html) {
				slot.outerHTML = html
			}
		} catch (error) {
			console.error(error)
		}
		slot.remove()

		setupNav()
		mq.addEventListener("change", setupNav)

		if (hash) {
			queueMicrotask(() => {
				const target = document.querySelector(`${hash} a`)

				if (target instanceof HTMLElement) {
					target.click()
				}
			})
		}

		if (mq.matches) {
			const sections = document.querySelectorAll('section')
			const updateColor = (entries: IntersectionObserverEntry[]) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						document.documentElement.style.backgroundColor = (entry.target as HTMLElement).style.getPropertyValue('--bg-color')
					}
				})
			}
			const observer = new IntersectionObserver(updateColor, {threshold: 0.5})

			sections.forEach(section => observer.observe(section))
		}

		if (navigator.userAgent.includes('Edg')) {
			document.querySelectorAll('img').forEach(img => img.setAttribute('inert', ''))
		}
	}
</script>
