---
import { config } from "../config";
import Layout from "../layouts/Layout.astro";
import ImageComponent from "../components/Image.astro";

const url = new URL("/images.json", Astro.request.url);

export interface Image {
	backgroundColor: string;
	caption: string;
	color: string;
	height: number;
	id: string;
	responsiveUrl: string;
	url: string;
	width: number;
}

const res: Promise<Image[]> = fetch(url.href).then((response) =>
	response.json(),
);
---

<script>
  const mq = window.matchMedia("(width <= 40rem)");

  document.querySelectorAll("section a").forEach((link, index) => {
    link?.addEventListener("click", (event) => {
      event.preventDefault();
      if (mq.matches) {
        return;
      }
      link.closest('section')?.[
        index % 2 ? "previousElementSibling" : "nextElementSibling"
      ]?.scrollIntoView();
    });
  });
</script>


<Layout title={config.title}>
  <header>
    <div>
      {config.title ? <h1>{config.title}</h1> : null}
      {config.description ? <p>{config.description}</p> : null}
    </div>
  </header>

  {
    res.then((images) => {
		return images.splice(0, 3).map(
      (
        {
          backgroundColor,
          caption,
          color,
          height,
          id,
          responsiveUrl,
          url,
          width,
        },
        index
      ) => {
        return (
          <ImageComponent
			backgroundColor={backgroundColor}
			caption={caption}
			color={color}
			height={height}
			id={id}
			loading={index < 3 ? "eager" : "lazy"}
			responsiveUrl={responsiveUrl}
			src={url}
			width={width}
          />
        );
      }
    )
	})
  }
</Layout>

<style>
  body {
    display: grid;
    grid-template-columns: auto 1fr;

    > *:nth-child(odd) {
      min-width: var(--size);
      max-width: var(--max-size);
    }
  }

  @media (width <= 40rem) {
    body {
      grid-template-columns: 1fr;
    }
  }

  header {
    padding: var(--gap);
    scroll-snap-align: start;

    > div {
      position: sticky;
      top: var(--gap);
    }

    * {
      font-size: clamp(0.65rem, 0.8vw, 1rem);
      font-weight: normal;
      margin: 0;
      text-transform: uppercase;
      -webkit-user-select: text;
      user-select: text;
    }
  }

  @media (width <= 40rem) {
    header {
      min-height: 30vh;
    }
  }
</style>
