---
import Layout from "../layouts/Layout.astro";
import Image from "../components/Image.astro";
import { config } from "../config";
import { v2 as cloudinary } from "cloudinary";

const BASELINE_SIZE = 1500;
const images = [];
const { api } = cloudinary;

cloudinary.config({
  api_key: import.meta.env.CLOUDINARY_API_KEY ?? process.env.CLOUDINARY_API_KEY,
  api_secret:
    import.meta.env.CLOUDINARY_API_SECRET ?? process.env.CLOUDINARY_API_SECRET,
  cloud_name:
    import.meta.env.CLOUDINARY_CLOUD_NAME ?? process.env.CLOUDINARY_CLOUD_NAME,
  secure: true,
});

const { resources } = await api.resources({
  context: true,
  max_results: 500,
  metadata: true,
  prefix: "photos",
  type: "upload",
});

for await (const item of resources) {
  const res = await api.resource(item.public_id, {
    colors: true,
    image_metadata: true,
  });

  const url = cloudinary.url(res.public_id, {
    crop: "fit",
    height: BASELINE_SIZE,
    quality: "auto",
    width: BASELINE_SIZE,
  });
  const cloudflareUrl = url.replace(
    "https://res.cloudinary.com/slovyagin/image/upload/",
    "https://images.slovyagin.com/upload/"
  );

  const color = res.colors[3][0].toLowerCase();
  const image = {
    caption: res.image_metadata.Description ?? null,
    backgroundColor: color,
    height: res.height,
    id: `${res.image_metadata.Description.toLowerCase().replace(
      ", ",
      "-"
    )}-${res.asset_id.substring(0, 4)}`,
    responsiveUrls: [
      cloudflareUrl
        .replace(`,w_${BASELINE_SIZE}`, ",w_600")
        .replace(`,h_${BASELINE_SIZE}`, ",h_600")
        .replaceAll(",", "%2C"),
      cloudflareUrl
        .replace(`,w_${BASELINE_SIZE}`, ",w_1024")
        .replace(`,h_${BASELINE_SIZE}`, ",h_1024")
        .replaceAll(",", "%2C"),
    ],
    color: invertColor(color),
    url: cloudflareUrl
      .replace(",q_auto", ",q_auto,f_auto")
      .replaceAll(",", "%2C"),
    width: res.width,
  };

  images.push(image);
}

function rgbToHsl(r: number, g: number, b: number) {
  const red = r / 255;
  const green = g / 255;
  const blue = b / 255;
  const max = Math.max(red, green, blue);
  const min = Math.min(red, green, blue);
  let h: number;
  let s: number;
  const l = (max + min) / 2;

  if (max === min) {
    h = s = 0;
  } else {
    const d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case red:
        h = (green - blue) / d + (green < blue ? 6 : 0);
        break;
      case green:
        h = (blue - red) / d + 2;
        break;
      case blue:
        h = (red - green) / d + 4;
        break;
    }
    // @ts-ignore
    h = h / 6;
  }

  return [h, s, l];
}

function invertColor(hex: string) {
  const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);

  if (!result) {
    return "black";
  }

  const r = Number.parseInt(result[1] ?? "0", 16);
  const g = Number.parseInt(result[2] ?? "0", 16);
  const b = Number.parseInt(result[3] ?? "0", 16);

  // @ts-ignore
  return rgbToHsl(r, g, b)[2] > 0.6 ? "black" : "white";
}
---

<script is:inline>
  document.querySelectorAll("section a").forEach((link, index) => {
    link?.addEventListener("click", (event) => {
      event.preventDefault();
      link.parentElement?.[
        index % 2 ? "previousElementSibling" : "nextElementSibling"
      ]?.scrollIntoView();
    });
  });
</script>

<Layout title={config.title}>
  <header>
    <h1>{config.title}</h1>
    <p>{config.bio}</p>
    <p>{config.description}</p>
  </header>

  {
    images.map(
      (
        {
          backgroundColor,
          caption,
          color,
          height,
          id,
          responsiveUrls,
          url,
          width,
        },
        index
      ) => {
        return (
          <Image
            backgroundColor={backgroundColor}
            caption={caption}
            color={color}
            height={height}
            id={id}
            loading={index < 3 ? "eager" : "lazy"}
            mobileUrl={responsiveUrls[0]!}
            src={url}
            tabletUrl={responsiveUrls[1]!}
            width={width}
          />
        );
      }
    )
  }
</Layout>

<style>
  body {
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
  }

  @media (width <= 75rem) {
    body {
      grid-template-columns: 1fr;
    }
  }

  header {
    padding: var(--gap);

    > * {
      font-size: 1rem;
      font-weight: normal;
      margin: 0;
      text-transform: uppercase;
      user-select: text;
    }
  }

  @media (width <= 75rem) {
    header {
      min-height: 30vh;
    }
  }
</style>
