---
import Layout from "../layouts/Layout.astro";
import ImagesList from "../components/ImagesList.astro";
import { config } from "../config";
import { INITIAL_IMAGES_COUNT } from "../constants";

const images = Astro.locals.images.slice(0, INITIAL_IMAGES_COUNT);
---

<script>
  const $slot = document.getElementById("slot");
  const res = await fetch('/extra/');
  const mq = window.matchMedia("(width <= 40rem)");
  const hash = window.location.hash

  if (res.ok && $slot) {
    const htmlString = await res.text()
    const doc = new DOMParser().parseFromString(htmlString, "text/html")
    const $content = doc.getElementById('extra')

    if ($content) {
      $slot.insertAdjacentHTML("beforebegin", $content.innerHTML);
    }
    $slot.remove();

    document.querySelectorAll<HTMLAnchorElement>("section a").forEach((link, index) => {
      const prev = index % 2

      if (link && !mq.matches) {
        link.addEventListener("click", (event) => {
          event.preventDefault();
          link.closest('section')?.[
            prev ? "previousElementSibling" : "nextElementSibling"
          ]?.scrollIntoView();
        });
        link.style.cursor = prev ? "w-resize": "e-resize";
      }
    });
  }

  if (hash) {
    const target = document.querySelector<HTMLAnchorElement>(`${hash} a`);

    target?.click();
  }
</script>

<Layout title={config.title}>
  <header>
    {
    config.title || config.description
    ? <div>
        {config.title ? <h1>{config.title}</h1> : null}
        {config.description ? <p>{config.description}</p> : null}
      </div> : null
    }
  </header>

  <ImagesList images={images}/>

  <div id="slot"></div>
</Layout>

<style>
  body {
    display: grid;
    grid-template-columns: auto 1fr;

    > *:nth-child(odd) {
      min-width: var(--size);
      max-width: var(--max-size);
    }
  }

  @media (width <= 40rem) {
    body {
      grid-template-columns: 1fr;
    }
  }

  header {
    padding: var(--gap);
    scroll-snap-align: start;

    > div {
      position: sticky;
      top: var(--gap);
    }

    * {
      font-size: clamp(0.65rem, 0.8vw, 1rem);
      font-weight: normal;
      margin: 0;
      text-transform: uppercase;
      -webkit-user-select: text;
      user-select: text;
    }
  }

  @media (width <= 40rem) {
    header {
      min-height: 30vh;
    }
  }
</style>
