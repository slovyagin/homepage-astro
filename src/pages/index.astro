---
import Layout from "../layouts/Layout.astro";
import ImagesList from "../components/ImagesList.astro";
import { INITIAL_IMAGES_COUNT, PROFILE } from "../constants";

const images = Astro.locals.images.slice(0, INITIAL_IMAGES_COUNT);
const color = images[0].color ?? "#fff";
---

<script>
const $slot = document.getElementById("slot");
const mq = window.matchMedia("(width <= 40rem)");
const { hash } = window.location;

const handleResponsiveNav = () => {
  const $$links = document.querySelectorAll<HTMLAnchorElement>("section a");

  $$links?.forEach((link, index) => {
    if (!link) {
      return;
    }

    const prev = !!(index % 2);
    const handler: EventListenerOrEventListenerObject = (event) => {
      if (mq.matches) {
        return;
      }

      event.preventDefault();
      link.closest('section')?.[
        prev ? "previousElementSibling" : "nextElementSibling"
      ]?.scrollIntoView();
    };

    link.addEventListener("click", handler);
  });
};

const res = await fetch('/extra/');

if (res.ok && $slot) {
  try {
    const htmlString = await res.text();
    const doc = new DOMParser().parseFromString(htmlString, "text/html");
    const $content = doc.getElementById('extra');

    if ($content) {
      $slot.insertAdjacentHTML("beforebegin", $content.innerHTML);
    }

    $slot.remove();
  } catch (error) {
    console.error(error);
  }

  handleResponsiveNav();
  mq.addEventListener("change", handleResponsiveNav);

  if (hash) {
    const $target = document.querySelector<HTMLAnchorElement>(`${hash} a`);

    $target?.click();
  }

  if (mq.matches) {
    const $$sections = document.querySelectorAll('section');
    const $meta = document.querySelector('meta[name="theme-color"]');

    const updateThemeColor = (entries: IntersectionObserverEntry[]) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const section = entry.target as HTMLElement;
          const backgroundColor = section.style.getPropertyValue('--bg-color');

          $meta?.setAttribute('content', backgroundColor);
        }
      });
    };

    const observer = new IntersectionObserver(updateThemeColor, {
        threshold: 0.5,
      });

    $$sections.forEach(section => observer.observe(section));
  }
}
</script>

<Layout title={PROFILE.title}>
  <header style={{color: color === 'white' ? 'var(--white)' : 'var(--black)'}}>
    {
    PROFILE.title || PROFILE.description
    ? <div>
        {PROFILE.title ? <h1>{PROFILE.title}</h1> : null}
        {PROFILE.description ? <p>{PROFILE.description}</p> : null}
      </div> : null
    }
  </header>

  <ImagesList images={images}/>

  <div id="slot" />
  <footer>\</footer>
</Layout>


<style>
  body {
    display: grid;
    grid-template-columns: 1fr 1fr;

    > *:nth-child(odd) {
      max-width: var(--max-size);
    }
  }

  @media (width <= 40rem) {
    body {
      grid-template-columns: 1fr;
    }
  }

  header {
    display: grid;
    padding: var(--gap);
    place-content: center;
    scroll-snap-align: start;
    text-align: center;

    * {
      font-size: var(--lg);
      font-weight: normal;
      margin: 0;
      user-select: text;
    }
  }

  footer {
    background-color: var(--white);
    color: var(--slime);
    display: grid;
    padding: var(--gap);
    place-content: center;
    text-align: center;
  }

  @media (width <= 40rem) {
      header {
          background-color: transparent;
          margin-block-end: -8cqh;
          padding: calc(var(--gap) * 2) calc(var(--gap) * 1/2) 0;
          place-content: start;
          text-align: start;
          z-index: 1;
      }
  }
</style>
