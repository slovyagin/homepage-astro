---
import Layout from "../layouts/Layout.astro";
import ImagesList from "../components/ImagesList.astro";
import { INITIAL_IMAGES_COUNT, PROFILE } from "../constants";

const images = Astro.locals.images.slice(0, INITIAL_IMAGES_COUNT);
const color = images[0].color ?? "#fff";
const lastImage = Astro.locals.images[Astro.locals.images.length - 1];
---

<script>
const slot = document.getElementById("slot");
const mq = window.matchMedia("(width <= 40rem)");
const { hash } = window.location;

const setupNav = () => {
  const links = document.querySelectorAll<HTMLAnchorElement>("section a");

  links?.forEach((link, i) => {
    if (!link) return;

    const prev = !!(i % 2);
    const onClick = (e: Event) => {
      if (mq.matches) return;

      e.preventDefault();
      link.closest('section')?.[
        prev ? "previousElementSibling" : "nextElementSibling"
      ]?.scrollIntoView();
    };

    link.addEventListener("click", onClick);
  });
};

const res = await fetch('/extra/');

if (res.ok && slot) {
  try {
    const html = await res.text();
    const doc = new DOMParser().parseFromString(html, "text/html");
    const content = doc.getElementById('extra');

    if (content) {
      slot.insertAdjacentHTML("beforebegin", content.innerHTML);
    }
  } catch (err) {
    console.error(err);
  }
  slot.remove();

  setupNav();
  mq.addEventListener("change", setupNav);

  if (hash) {
    requestAnimationFrame(() => {
      const target = document.querySelector(`${hash} a`);

      if (target instanceof HTMLElement) {
        target.click();
      }
    });
  }

  if (mq.matches) {
    const sections = document.querySelectorAll('section');
    const meta = document.querySelector('meta[name="theme-color"]');

    const updateColor = (entries: IntersectionObserverEntry[]) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const bgColor = (entry.target as HTMLElement).style.getPropertyValue('--bg-color');
          meta?.setAttribute('content', bgColor);
        }
      });
    };

    const observer = new IntersectionObserver(updateColor, { threshold: 0.5 });
    sections.forEach(section => observer.observe(section));
  }
}
</script>

<Layout title={PROFILE.title}>
  <header style={{color: color === 'white' ? 'var(--white)' : 'var(--black)'}}>
    {
    PROFILE.title || PROFILE.description
    ? <div>
        {PROFILE.title ? <h1>{PROFILE.title}</h1> : null}
        {PROFILE.description ? <p>{PROFILE.description}</p> : null}
      </div> : null
    }
  </header>
  <ImagesList images={images}/>
  <div id="slot" />
  <footer style={`
    --footer-bg-color: ${lastImage.backgroundColor};
    --span: ${Astro.locals.images.length % 2 ? 'span 2 / span 2' : 'auto'};
  `}>‚ùß</footer>
</Layout>

<style>
  body {
    display: grid;
    grid-template-columns: 1fr 1fr;

    > *:nth-child(odd) {
      max-width: var(--max-size);
    }
  }

  @media (width <= 40rem) {
    body {
      grid-template-columns: 1fr;
    }
  }

  header {
    display: grid;
    padding: var(--gap);
    place-content: center;
    scroll-snap-align: start;
    text-align: center;

    * {
      font-size: var(--lg);
      font-weight: normal;
      margin: 0;
      user-select: text;
    }
  }

  footer {
    min-height: 100vh;
    background-color: var(--footer-bg-color);
    color: var(--slime);
    display: grid;
    font-size: max(2rem, 2.5cqi);
    padding: var(--gap);
    place-content: center;
    scroll-snap-align: start;
    text-align: center;
    grid-column: var(--span);
  }

  @media (width <= 40rem) {
      header {
          background-color: transparent;
          margin-block-end: -8cqh;
          padding: calc(var(--gap) * 2) calc(var(--gap) * 1/2) 0;
          place-content: start;
          text-align: start;
          z-index: 1;
      }

      footer {
        min-height: 25vh;
      }
  }
</style>
