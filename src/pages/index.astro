---
import Layout from "../layouts/Layout.astro";
import ImageComponent from "../components/Image.astro";
import { config } from "../config";
import { INITIAL_IMAGES_COUNT } from "../constants";

const images = Astro.locals.images.slice(0, INITIAL_IMAGES_COUNT);
---

<script>
  const mq = window.matchMedia("(width <= 40rem)");

  document.querySelectorAll("section a").forEach((link, index) => {
    link?.addEventListener("click", (event) => {
      event.preventDefault();
      if (mq.matches) {
        return;
      }
      link.closest('section')?.[
        index % 2 ? "previousElementSibling" : "nextElementSibling"
      ]?.scrollIntoView();
    });
  });
</script>

<script>
  const res = await fetch('/extra')

  if (res.ok) {
    const htmlString = await res.text()

    const $slot = document.getElementById('slot')

    if ($slot) {
      const doc = new DOMParser().parseFromString(htmlString, "text/html")
      const content = doc.body.querySelector('* > div')

      if (content) {
        $slot.insertAdjacentHTML("beforebegin", content.innerHTML);
        $slot.remove();
      }
    }
  }

  const hash = window.location.hash

  if (hash) {
    const target = document.querySelector(`${hash} a`);
    
    target?.click();
  }
</script>

<Layout title={config.title}>
  <header>
    <div>
      {config.title ? <h1>{config.title}</h1> : null}
      {config.description ? <p>{config.description}</p> : null}
    </div>
  </header>

  {
    images?.map(
      (
        {
          backgroundColor,
          caption,
          color,
          height,
          id,
          responsiveUrl,
          url,
          width,
        },
        index
      ) => {
        return (
          <ImageComponent
            backgroundColor={backgroundColor}
            caption={caption}
            color={color}
            height={height}
            id={id}
            loading={index < 3 ? "eager" : "lazy"}
            responsiveUrl={responsiveUrl}
            src={url}
            width={width}
          />
        );
      }
    )
  }
  <div id="slot"></div>
</Layout>

<style>
  body {
    display: grid;
    grid-template-columns: auto 1fr;

    > *:nth-child(odd) {
      min-width: var(--size);
      max-width: var(--max-size);
    }
  }

  @media (width <= 40rem) {
    body {
      grid-template-columns: 1fr;
    }
  }

  header {
    padding: var(--gap);
    scroll-snap-align: start;

    > div {
      position: sticky;
      top: var(--gap);
    }

    * {
      font-size: clamp(0.65rem, 0.8vw, 1rem);
      font-weight: normal;
      margin: 0;
      text-transform: uppercase;
      -webkit-user-select: text;
      user-select: text;
    }
  }

  @media (width <= 40rem) {
    header {
      min-height: 30vh;
    }
  }
</style>
