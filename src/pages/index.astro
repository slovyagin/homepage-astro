---
import Layout from "../layouts/Layout.astro";
import ImagesList from "../components/ImagesList.astro";
import { config } from "../config";
import { INITIAL_IMAGES_COUNT } from "../constants";

const images = Astro.locals.images.slice(0, INITIAL_IMAGES_COUNT);
const color = images[0].color ?? "#fff";
---

<script>
const $slot = document.getElementById("slot");
const mq = window.matchMedia("(width <= 40rem)");
const { hash } = window.location;

const handleResponsiveNav = () => {
  const $links = document.querySelectorAll<HTMLAnchorElement>("section a");
  $links?.forEach((link, index) => {
    if (!link) {
      return;
    }

    const prev = !!(index % 2);
    const handler: EventListenerOrEventListenerObject = (event) => {
      if (mq.matches) return;

      event.preventDefault();
      link.closest('section')?.[
        prev ? "previousElementSibling" : "nextElementSibling"
      ]?.scrollIntoView();
    };

    link.addEventListener("click", handler);
  });
};

const setupThemeColorObserver = () => {
  const sections = document.querySelectorAll('section');
  const $meta = document.querySelector('meta[name="theme-color"]');

  const updateThemeColor = (entries: IntersectionObserverEntry[]) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const section = entry.target as HTMLElement;
        const backgroundColor = section.style.getPropertyValue('--bg-color');

        $meta?.setAttribute('content', backgroundColor);
      }
    });
  };

  const observer = new IntersectionObserver(updateThemeColor, {
    threshold: 0.75
  });

  sections.forEach(section => observer.observe(section));
};

const init = async () => {
  const res = await fetch('/extra/');
  if (res.ok && $slot) {
    const htmlString = await res.text();
    const doc = new DOMParser().parseFromString(htmlString, "text/html");
    const $content = doc.getElementById('extra');

    if ($content) {
      $slot.insertAdjacentHTML("beforebegin", $content.innerHTML);
    }

    $slot.remove();
    handleResponsiveNav();
    mq.addEventListener("change", handleResponsiveNav);

    if (hash) {
      const target = document.querySelector<HTMLAnchorElement>(`${hash} a`);

      target?.click();
    }

    if (mq.matches) {
      setupThemeColorObserver();
    }
  }
};

init();
</script>

<Layout title={config.title}>
  <header style={{color: color === 'white' ? 'var(--white)' : 'var(--black)'}}>
    {
    config.title || config.description
    ? <div>
        {config.title ? <h1>{config.title}</h1> : null}
        {config.description ? <p>{config.description}</p> : null}
      </div> : null
    }
  </header>

  <ImagesList images={images}/>

  <div id="slot"/>
</Layout>


<style>
  body {
    display: grid;
    grid-template-columns: 1fr 1fr;

    > *:nth-child(odd) {
      max-width: var(--max-size);
    }
  }

  @media (width <= 40rem) {
    body {
      grid-template-columns: 1fr;
    }
  }

  header {
    padding: var(--gap);
    scroll-snap-align: start;
    text-align: center;
    display: grid;
    place-content: center;

    * {
      font-size: var(--lg);
      font-weight: normal;
      margin: 0;
      -webkit-user-select: text;
      user-select: text;
    }
  }

  @media (width <= 40rem) {
      header {
          background-color: transparent;
          margin-block-end: -8cqh;
          z-index: 1;
      }
  }
</style>
