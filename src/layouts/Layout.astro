---
import {profile, typeface} from "../constants"
import {type Image} from "../types";

interface Props {
	title: string
}

const {title} = Astro.props
const {images} = Astro.locals
const count = images?.length ?? 0
const bg = images?.[0]?.background ?? "#fff"
const color = images?.[0]?.color ?? "#fff"
const lastImage: Image | Pick<Image, 'background'> = images?.[images?.length - 1] ?? {
	background: 'transparent'
}
---

<!doctype html>
<html lang="en" data-count={count}>
<head>
	<meta charset="UTF-8"/>
	<meta name="viewport" content="width=device-width"/>
	<title>{title}</title>
	<meta name="description" content={profile.sanitizedDescription}/>

	<link rel="icon" href="/favicon.ico" sizes="32x32">
	<link rel="icon" href="/favicon.png" type="image/png">
	<link rel="apple-touch-icon" href='/favicon.png'>

	<meta property="og:title" content={profile.title}/>
	<meta property="og:description" content={profile.sanitizedDescription}/>
	<meta property="og:image" content={profile.image}/>
	<meta
		property="og:image:alt"
		content={[profile.title, profile.sanitizedDescription].filter(Boolean).join(", ")}
	/>
	<meta property="og:locale" content="en"/>
	<meta property="og:type" content="website"/>
	<meta property="og:url" content={profile.url}/>

	<meta name="twitter:card" content="summary_large_image"/>
	<meta name="twitter:title" content={profile.title}>
	<meta name="twitter:description" content={profile.sanitizedDescription}>
	<meta name="twitter:image" content={profile.image}>

	<link rel="canonical" href={profile.url}/>

	<link
		as="font"
		crossorigin
		href={typeface.url}
		rel="preload"
		type="font/woff2"
	/>

	<link rel="prefetch" href="/extra/" as="document"/>

	<style set:html={
		`
    @font-face {
        font-family: ${typeface.name};
        src: url(${typeface.url}) format("woff2");
        font-style: normal;
        font-display: swap;
        font-weight: ${typeface.weight};
        font-stretch: normal;
        unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
      }

      *, ::before, ::after {
        font-family: ${[typeface.name, typeface.fallback, typeface.type].filter(Boolean).join(", ")};
      }
      `
	}/>

	<slot name="head"/>
</head>
<body>
<header style={{color: color === 'white' ? 'var(--white)' : 'var(--black)'}}>
	{
		profile.title || profile.description
			?
			<div>
				{profile.title ? <h1>{profile.title}</h1> : null}
				{profile.description ? <p>{profile.description}</p> : null}
			</div> : null
	}
</header>
<slot/>
<footer style={`
  --footer-bg-color: ${lastImage?.background};
  --span: ${count % 2 ? 'span 2 / span 2' : 'auto'};
`}/>
</body>
</html>

<style is:global define:vars={{bg}}>
	:root {
		--black: rgba(22, 22, 29, 0.86);
		--white: rgba(254, 250, 252, 0.86);
		--slime: #cffc50;

		--gap: 1rem;
		--leading: 1.375;
		--md: calc(var(--font-size) * 0.88);
		--lg: calc(var(--font-size) * 1.28);

		--max-size: 100rem;
		--font-size: clamp(1rem, 1vw, 1.2rem);
	}

	*,
	::before,
	::after {
		position: relative;
		box-sizing: border-box;
		font-kerning: normal;
		/*font-variant-numeric: lining-nums;*/
		/*font-feature-settings: "lnum";*/
	}

	html {
		background-color: var(--bg);
		color: var(--black);
		font-size: 1rem;
		line-height: var(--leading);
		scroll-snap-type: y mandatory;
		user-select: none;
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
		-webkit-text-size-adjust: 100%;
	}

	body {
		margin: 0;
		font-size: var(--font-size);
	}

	::selection {
		background-color: var(--slime);
		color: var(--black);
	}
</style>

<style>
	header {
		display: grid;
		padding: var(--gap);
		place-content: center;
		scroll-snap-align: start;
		text-align: center;

		* {
			font-size: var(--lg);
			font-weight: normal;
			margin: 0;
			user-select: text;
		}
	}

	footer {
		background-color: var(--footer-bg-color);
		color: var(--slime);
		display: grid;
		font-size: clamp(2rem, 2.5cqi, 3rem);
		grid-column: var(--span);
		max-width: auto;
		min-height: 100vh;
		padding: var(--gap);
		place-content: center;
		scroll-snap-align: end;
		text-align: center;

		&::before {
			content: "‚ù¶";
		}
	}

	@media (width <= 744px) {
		html {
			transition: 1s background-color ease;
		}

		header {
			background-color: transparent;
			margin-block-end: -16cqh;
			padding: calc(var(--gap) * 2) calc(var(--gap) * 0.5) 0;
			z-index: 1;
		}

		footer {
			min-height: 25vh;
			grid-column: auto;
		}
	}
</style>
